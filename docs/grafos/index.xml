<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grafos on</title><link>/docs/grafos/</link><description>Recent content in Grafos on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 15 Mar 2022 13:48:45 +0000</lastBuildDate><atom:link href="/docs/grafos/index.xml" rel="self" type="application/rss+xml"/><item><title>Introducción</title><link>/docs/grafos/introduccion/</link><pubDate>Sat, 19 Mar 2022 08:48:45 +0000</pubDate><guid>/docs/grafos/introduccion/</guid><description>¿Qué son los grafos? Los grafos son un tipo específico de estructura que nos sirve para modelar muchos problemas distintos. Estos se representan como un conjunto de puntos $V$ (llamados vértices o nodos) conectados por un conjunto de líneas $E$ (llamadas aristas o arcos). Las aristas pueden ser no-dirigidas (se pueden recorrer en ambas direcciones) o dirigidas y pueden tener peso o no.
El área de grafos ha sido muy estudiada y se han desarrollado múltiples algoritmos para trabajar con ellos.</description></item><item><title>Búsqueda en grafos (BFS y DFS)</title><link>/docs/grafos/busqueda/</link><pubDate>Sat, 19 Mar 2022 08:48:45 +0000</pubDate><guid>/docs/grafos/busqueda/</guid><description>Búsqueda en grafos Ahora, sabemos que podemos modelar problemas con grafos y como guardarlos de forma eficiente pero no podemos hacer nada aún con ellos. Estos primeros algoritmos que veremos ahora son esenciales y se usan con demasiada frecuencia así que es importante entederlos bien.
Para estos dos algoritmos usaremos grafos guardados como listas de adyacencia. Ambos pueden ser implementados con matrices de adyacencia pero debido a la facilidad con la que podemos encontrar a los vecinos de cualquier vértice $i$ en las listas de adyacencia se prefiere este método (y en general se usa más la lista de adyacencia).</description></item></channel></rss>